#!/usr/bin/env python3
"""
Epic Games Manifest Updater Pro v2.5 - Simplified Working Version
Author: Wesley Ellis

A working Epic Games themed GUI application for updating manifests.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import webbrowser
from datetime import datetime
import os
import json
import psutil
import shutil

# Epic Games Theme Colors
class EpicTheme:
    PRIMARY_BG = "#0f1419"
    SECONDARY_BG = "#1a1f29"
    ACCENT_BG = "#2a3441"
    BUTTON_BG = "#313c4e"
    EPIC_BLUE = "#0078f2"
    EPIC_BLUE_LIGHT = "#40a9ff"
    EPIC_ORANGE = "#f99e1a"
    SUCCESS_GREEN = "#52c41a"
    WARNING_ORANGE = "#fa8c16"
    ERROR_RED = "#ff4d4f"
    TEXT_PRIMARY = "#ffffff"
    TEXT_SECONDARY = "#8c9196"
    TEXT_MUTED = "#5c6370"

class EpicManifestUpdaterPro:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÆ Epic Games Manifest Updater Pro v2.5")
        self.root.geometry("900x600")
        self.root.configure(bg=EpicTheme.PRIMARY_BG)
        
        # Variables
        self.selected_path = tk.StringVar()
        self.is_processing = False
        self.games_found = []
        
        # Create GUI
        self.create_widgets()
        
        # Center window
        self.center_window()
        
        # Initialize
        self.log_message("üéÆ Epic Games Manifest Updater Pro v2.5 Ready!", "EPIC")
        
    def center_window(self):
        """Center the window on screen"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        pos_x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        pos_y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{pos_x}+{pos_y}")
        
    def create_widgets(self):
        """Create Epic Games themed interface"""
        # Main container
        main_frame = tk.Frame(self.root, bg=EpicTheme.PRIMARY_BG)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Header with Epic branding
        header_frame = tk.Frame(main_frame, bg=EpicTheme.PRIMARY_BG)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Epic logo
        logo_frame = tk.Frame(header_frame, bg=EpicTheme.EPIC_BLUE, width=50, height=50)
        logo_frame.pack(side=tk.LEFT, padx=(0, 15))
        logo_frame.pack_propagate(False)
        
        logo_label = tk.Label(logo_frame, text="E", font=("Segoe UI", 20, "bold"),
                             bg=EpicTheme.EPIC_BLUE, fg=EpicTheme.TEXT_PRIMARY)
        logo_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
        
        # Title
        title_frame = tk.Frame(header_frame, bg=EpicTheme.PRIMARY_BG)
        title_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        tk.Label(title_frame, text="Epic Games Manifest Updater Pro",
                font=("Segoe UI", 16, "bold"),
                bg=EpicTheme.PRIMARY_BG, fg=EpicTheme.TEXT_PRIMARY).pack(anchor=tk.W)
        
        tk.Label(title_frame, text="Fix your game library after moving installations",
                font=("Segoe UI", 10),
                bg=EpicTheme.PRIMARY_BG, fg=EpicTheme.TEXT_SECONDARY).pack(anchor=tk.W)
        
        # Controls panel
        controls_frame = tk.Frame(main_frame, bg=EpicTheme.ACCENT_BG)\n        controls_frame.pack(fill=tk.X, pady=(0, 20))\n        \n        # Instructions\n        inst_frame = tk.Frame(controls_frame, bg=EpicTheme.SECONDARY_BG)\n        inst_frame.pack(fill=tk.X, padx=15, pady=15)\n        \n        tk.Label(inst_frame, text=\"üìã Quick Start Guide\",\n                font=(\"Segoe UI\", 11, \"bold\"),\n                bg=EpicTheme.SECONDARY_BG, fg=EpicTheme.EPIC_ORANGE).pack(pady=10)\n        \n        instructions = [\n            \"1. Move your Epic Games folder to new location first\",\n            \"2. Select the new folder location below\",\n            \"3. Click 'Update Manifests' to fix Epic Games Launcher\",\n            \"4. Start Epic Games Launcher - your games should be recognized!\"\n        ]\n        \n        for inst in instructions:\n            tk.Label(inst_frame, text=inst, font=(\"Segoe UI\", 9),\n                    bg=EpicTheme.SECONDARY_BG, fg=EpicTheme.TEXT_SECONDARY).pack(anchor=tk.W, padx=10, pady=2)\n        \n        # Path selection\n        path_frame = tk.Frame(controls_frame, bg=EpicTheme.ACCENT_BG)\n        path_frame.pack(fill=tk.X, padx=15, pady=15)\n        \n        tk.Label(path_frame, text=\"New Games Location:\",\n                font=(\"Segoe UI\", 10, \"bold\"),\n                bg=EpicTheme.ACCENT_BG, fg=EpicTheme.TEXT_PRIMARY).pack(anchor=tk.W, pady=(0, 5))\n        \n        path_entry_frame = tk.Frame(path_frame, bg=EpicTheme.ACCENT_BG)\n        path_entry_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        self.path_entry = tk.Entry(path_entry_frame, textvariable=self.selected_path,\n                                  font=(\"Segoe UI\", 10), bg=EpicTheme.SECONDARY_BG,\n                                  fg=EpicTheme.TEXT_PRIMARY, insertbackground=EpicTheme.TEXT_PRIMARY,\n                                  relief=tk.FLAT, bd=5, state=\"readonly\")\n        self.path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))\n        \n        browse_btn = tk.Button(path_entry_frame, text=\"üìÇ Browse\",\n                              font=(\"Segoe UI\", 10), bg=EpicTheme.BUTTON_BG,\n                              fg=EpicTheme.TEXT_PRIMARY, relief=tk.FLAT,\n                              activebackground=EpicTheme.EPIC_BLUE,\n                              command=self.browse_folder)\n        browse_btn.pack(side=tk.RIGHT)\n        \n        # Action buttons\n        buttons_frame = tk.Frame(controls_frame, bg=EpicTheme.ACCENT_BG)\n        buttons_frame.pack(fill=tk.X, padx=15, pady=(0, 15))\n        \n        self.update_btn = tk.Button(buttons_frame, text=\"üîç Scan & Update Manifests\",\n                                   font=(\"Segoe UI\", 12, \"bold\"),\n                                   bg=EpicTheme.EPIC_BLUE, fg=EpicTheme.TEXT_PRIMARY,\n                                   relief=tk.FLAT, activebackground=EpicTheme.EPIC_BLUE_LIGHT,\n                                   command=self.start_update_process)\n        self.update_btn.pack(fill=tk.X, pady=(0, 10), ipady=8)\n        \n        # Secondary buttons\n        sec_buttons_frame = tk.Frame(buttons_frame, bg=EpicTheme.ACCENT_BG)\n        sec_buttons_frame.pack(fill=tk.X)\n        \n        close_btn = tk.Button(sec_buttons_frame, text=\"‚ùå Close Epic\",\n                             font=(\"Segoe UI\", 10), bg=EpicTheme.BUTTON_BG,\n                             fg=EpicTheme.TEXT_PRIMARY, relief=tk.FLAT,\n                             command=self.close_epic_games)\n        close_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))\n        \n        backup_btn = tk.Button(sec_buttons_frame, text=\"üíæ Backup\",\n                              font=(\"Segoe UI\", 10), bg=EpicTheme.BUTTON_BG,\n                              fg=EpicTheme.TEXT_PRIMARY, relief=tk.FLAT,\n                              command=self.create_backup)\n        backup_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))\n        \n        # Activity log\n        log_frame = tk.Frame(main_frame, bg=EpicTheme.ACCENT_BG)\n        log_frame.pack(fill=tk.BOTH, expand=True)\n        \n        # Log header\n        log_header = tk.Frame(log_frame, bg=EpicTheme.ACCENT_BG)\n        log_header.pack(fill=tk.X, padx=10, pady=10)\n        \n        tk.Label(log_header, text=\"üìã Activity Log\",\n                font=(\"Segoe UI\", 12, \"bold\"),\n                bg=EpicTheme.ACCENT_BG, fg=EpicTheme.TEXT_PRIMARY).pack(side=tk.LEFT)\n        \n        clear_btn = tk.Button(log_header, text=\"üóëÔ∏è Clear\",\n                             font=(\"Segoe UI\", 9), bg=EpicTheme.BUTTON_BG,\n                             fg=EpicTheme.TEXT_PRIMARY, relief=tk.FLAT,\n                             command=self.clear_log)\n        clear_btn.pack(side=tk.RIGHT)\n        \n        # Log text area\n        self.log_text = scrolledtext.ScrolledText(log_frame, height=15,\n                                                 font=(\"Consolas\", 9),\n                                                 bg=EpicTheme.PRIMARY_BG,\n                                                 fg=EpicTheme.TEXT_PRIMARY,\n                                                 insertbackground=EpicTheme.TEXT_PRIMARY,\n                                                 selectbackground=EpicTheme.EPIC_BLUE,\n                                                 relief=tk.FLAT, bd=0)\n        self.log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))\n        \n        # Configure text tags for colored logging\n        self.log_text.tag_configure(\"INFO\", foreground=EpicTheme.TEXT_PRIMARY)\n        self.log_text.tag_configure(\"SUCCESS\", foreground=EpicTheme.SUCCESS_GREEN)\n        self.log_text.tag_configure(\"WARNING\", foreground=EpicTheme.WARNING_ORANGE)\n        self.log_text.tag_configure(\"ERROR\", foreground=EpicTheme.ERROR_RED)\n        self.log_text.tag_configure(\"EPIC\", foreground=EpicTheme.EPIC_BLUE)\n        \n        # Status bar\n        self.status_var = tk.StringVar(value=\"Ready - Select your new games folder to begin\")\n        status_bar = tk.Label(main_frame, textvariable=self.status_var,\n                             font=(\"Segoe UI\", 9), bg=EpicTheme.SECONDARY_BG,\n                             fg=EpicTheme.TEXT_SECONDARY, relief=tk.SUNKEN, anchor=tk.W)\n        status_bar.pack(fill=tk.X, pady=(10, 0))\n        \n    def log_message(self, message, level=\"INFO\"):\n        \"\"\"Add a message to the log with Epic styling\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        \n        emoji_map = {\n            \"INFO\": \"‚ÑπÔ∏è\",\n            \"SUCCESS\": \"‚úÖ\",\n            \"WARNING\": \"‚ö†Ô∏è\",\n            \"ERROR\": \"‚ùå\",\n            \"EPIC\": \"üéÆ\"\n        }\n        \n        emoji = emoji_map.get(level, \"üìù\")\n        log_entry = f\"[{timestamp}] {emoji} {message}\\n\"\n        \n        self.log_text.insert(tk.END, log_entry, level)\n        self.log_text.see(tk.END)\n        self.root.update_idletasks()\n        \n    def clear_log(self):\n        \"\"\"Clear the activity log\"\"\"\n        self.log_text.delete(1.0, tk.END)\n        self.log_message(\"Activity log cleared\", \"INFO\")\n        \n    def browse_folder(self):\n        \"\"\"Open folder browser dialog\"\"\"\n        self.log_message(\"Opening folder selection dialog...\", \"INFO\")\n        \n        folder_path = filedialog.askdirectory(\n            title=\"Select Epic Games Folder Location\",\n            mustexist=True\n        )\n        \n        if folder_path:\n            self.selected_path.set(folder_path)\n            self.log_message(f\"Selected folder: {folder_path}\", \"SUCCESS\")\n            self.scan_games_folder(folder_path)\n        else:\n            self.log_message(\"Folder selection cancelled\", \"WARNING\")\n            \n    def scan_games_folder(self, path):\n        \"\"\"Scan folder for Epic Games\"\"\"\n        self.log_message(\"Scanning for Epic Games...\", \"INFO\")\n        self.games_found.clear()\n        \n        try:\n            for item in os.listdir(path):\n                item_path = os.path.join(path, item)\n                if os.path.isdir(item_path):\n                    egstore_path = os.path.join(item_path, \".egstore\")\n                    if os.path.exists(egstore_path):\n                        self.games_found.append(item)\n                        self.log_message(f\"Found game: {item}\", \"SUCCESS\")\n            \n            if self.games_found:\n                self.log_message(f\"Scan complete: {len(self.games_found)} games found\", \"SUCCESS\")\n                self.status_var.set(f\"Found {len(self.games_found)} games - Ready to update manifests\")\n            else:\n                self.log_message(\"No Epic Games found in selected folder\", \"WARNING\")\n                self.status_var.set(\"No games found - Please check folder location\")\n                \n        except Exception as e:\n            self.log_message(f\"Error scanning folder: {str(e)}\", \"ERROR\")\n            \n    def find_manifests_directory(self):\n        \"\"\"Find Epic Games manifests directory\"\"\"\n        possible_paths = [\n            \"C:\\\\ProgramData\\\\Epic\\\\EpicGamesLauncher\\\\Data\\\\Manifests\",\n            os.path.expanduser(\"~\\\\AppData\\\\Local\\\\EpicGamesLauncher\\\\Saved\\\\Config\\\\Windows\"),\n        ]\n        \n        for path in possible_paths:\n            if os.path.exists(path):\n                return path\n        return None\n        \n    def close_epic_games(self):\n        \"\"\"Close Epic Games processes\"\"\"\n        self.log_message(\"Closing Epic Games processes...\", \"INFO\")\n        \n        processes_to_close = [\"EpicGamesLauncher\", \"EpicWebHelper\", \"UnrealEngineLauncher\"]\n        closed_count = 0\n        \n        for proc_name in processes_to_close:\n            try:\n                for proc in psutil.process_iter(['pid', 'name']):\n                    if proc.info['name'] and proc_name.lower() in proc.info['name'].lower():\n                        proc.terminate()\n                        closed_count += 1\n                        self.log_message(f\"Closed: {proc.info['name']}\", \"SUCCESS\")\n            except Exception as e:\n                self.log_message(f\"Error closing {proc_name}: {str(e)}\", \"WARNING\")\n        \n        if closed_count > 0:\n            self.log_message(f\"Closed {closed_count} processes\", \"SUCCESS\")\n        else:\n            self.log_message(\"No Epic Games processes found\", \"INFO\")\n            \n    def create_backup(self):\n        \"\"\"Create backup of manifest files\"\"\"\n        self.log_message(\"Creating manifest backup...\", \"INFO\")\n        \n        try:\n            manifests_dir = self.find_manifests_directory()\n            if not manifests_dir:\n                self.log_message(\"Cannot find manifests directory\", \"ERROR\")\n                return\n            \n            backup_dir = os.path.join(os.path.dirname(manifests_dir), \"Manifests_Backup\")\n            timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            backup_path = f\"{backup_dir}_{timestamp}\"\n            \n            shutil.copytree(manifests_dir, backup_path)\n            self.log_message(f\"Backup created: {backup_path}\", \"SUCCESS\")\n            messagebox.showinfo(\"Backup Complete\", f\"Backup created at:\\n{backup_path}\")\n            \n        except Exception as e:\n            self.log_message(f\"Backup failed: {str(e)}\", \"ERROR\")\n            \n    def start_update_process(self):\n        \"\"\"Start the update process\"\"\"\n        if not self.selected_path.get():\n            messagebox.showerror(\"No Folder Selected\", \"Please select your games folder first!\")\n            return\n            \n        if not self.games_found:\n            self.log_message(\"No games found - scan folder first\", \"WARNING\")\n            return\n            \n        if self.is_processing:\n            return\n        \n        # Run in separate thread\n        thread = threading.Thread(target=self.update_manifests)\n        thread.daemon = True\n        thread.start()\n        \n    def update_manifests(self):\n        \"\"\"Update Epic Games manifest files\"\"\"\n        self.is_processing = True\n        self.update_btn.config(state=\"disabled\", text=\"üîÑ Updating...\")\n        self.status_var.set(\"Updating manifest files...\")\n        \n        try:\n            new_location = self.selected_path.get()\n            self.log_message(\"Starting manifest update process...\", \"EPIC\")\n            \n            manifests_dir = self.find_manifests_directory()\n            if not manifests_dir:\n                self.log_message(\"ERROR: Cannot find manifests directory!\", \"ERROR\")\n                return\n            \n            self.log_message(f\"Found manifests: {manifests_dir}\", \"SUCCESS\")\n            \n            manifest_files = [f for f in os.listdir(manifests_dir) if f.endswith('.item')]\n            if not manifest_files:\n                self.log_message(\"No manifest files found!\", \"WARNING\")\n                return\n            \n            self.log_message(f\"Processing {len(manifest_files)} manifest files...\", \"INFO\")\n            \n            update_count = 0\n            error_count = 0\n            \n            for manifest_file in manifest_files:\n                try:\n                    manifest_path = os.path.join(manifests_dir, manifest_file)\n                    \n                    with open(manifest_path, 'r', encoding='utf-8') as f:\n                        content = json.load(f)\n                    \n                    old_path = content.get('InstallLocation', '')\n                    if not old_path:\n                        continue\n                    \n                    game_name = os.path.basename(old_path.rstrip('\\\\'))\n                    new_path = os.path.join(new_location, game_name)\n                    \n                    if os.path.exists(new_path) and old_path != new_path:\n                        content['InstallLocation'] = new_path\n                        content['ManifestLocation'] = os.path.join(new_path, '.egstore')\n                        content['StagingLocation'] = os.path.join(new_path, '.egstore', 'bps')\n                        \n                        with open(manifest_path, 'w', encoding='utf-8') as f:\n                            json.dump(content, f, indent=2)\n                        \n                        self.log_message(f\"‚úÖ Updated: {game_name}\", \"SUCCESS\")\n                        update_count += 1\n                    \n                except Exception as e:\n                    self.log_message(f\"‚ùå Error processing {manifest_file}: {str(e)}\", \"ERROR\")\n                    error_count += 1\n            \n            # Summary\n            self.log_message(\"=\" * 50, \"INFO\")\n            self.log_message(\"üéâ EPIC GAMES UPDATE COMPLETE!\", \"EPIC\")\n            self.log_message(f\"‚úÖ Updated: {update_count} games\", \"SUCCESS\")\n            if error_count > 0:\n                self.log_message(f\"‚ùå Errors: {error_count}\", \"ERROR\")\n            self.log_message(\"üöÄ You can now start Epic Games Launcher!\", \"EPIC\")\n            \n            # Show completion dialog\n            result_msg = f\"Epic Games Update Complete!\\n\\n\"\n            result_msg += f\"‚úÖ Updated: {update_count} games\\n\"\n            if error_count > 0:\n                result_msg += f\"‚ùå Errors: {error_count}\\n\"\n            result_msg += f\"\\nüöÄ Ready to launch Epic Games!\"\n            \n            messagebox.showinfo(\"Update Complete\", result_msg)\n            \n        except Exception as e:\n            self.log_message(f\"FATAL ERROR: {str(e)}\", \"ERROR\")\n            messagebox.showerror(\"Critical Error\", f\"Error: {str(e)}\")\n            \n        finally:\n            self.is_processing = False\n            self.update_btn.config(state=\"normal\", text=\"üîç Scan & Update Manifests\")\n            self.status_var.set(\"Update complete - Ready for Epic Games Launcher\")\n\n\ndef main():\n    \"\"\"Main application entry point\"\"\"\n    root = tk.Tk()\n    app = EpicManifestUpdaterPro(root)\n    root.mainloop()\n\n\nif __name__ == \"__main__\":\n    main()\n