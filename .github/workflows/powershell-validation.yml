name: PowerShell Script Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '*.ps1'
      - 'scripts/*.ps1'
      - 'tests/*.ps1'
  pull_request:
    branches: [ main ]
    paths:
      - '*.ps1'
      - 'scripts/*.ps1'  
      - 'tests/*.ps1'
  workflow_dispatch:

jobs:
  validate-powershell:
    name: PowerShell Validation
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      uses: actions/setup-powershell@v1
      
    - name: Install required modules
      shell: pwsh
      run: |
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        
        try {
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -ErrorAction Stop
          Write-Host "✅ PSScriptAnalyzer installed successfully" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Failed to install PSScriptAnalyzer: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
        try {
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck -ErrorAction Stop
          Write-Host "✅ Pester installed successfully" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Failed to install Pester: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
    - name: Validate repository structure
      shell: pwsh
      run: |
        Write-Host "Validating repository structure..." -ForegroundColor Blue
        
        # Check for main script
        if (Test-Path "./EpicManifestUpdater.ps1") {
          Write-Host "✅ Main script found: EpicManifestUpdater.ps1" -ForegroundColor Green
        } else {
          Write-Host "❌ Main script not found: EpicManifestUpdater.ps1" -ForegroundColor Red
          exit 1
        }
        
        # Check for other important files
        $importantFiles = @("README.md", "LICENSE", "index.html")
        foreach ($file in $importantFiles) {
          if (Test-Path $file) {
            Write-Host "✅ Found: $file" -ForegroundColor Green
          } else {
            Write-Host "⚠️ Missing: $file" -ForegroundColor Yellow
          }
        }
        
    - name: Test PowerShell syntax
      shell: pwsh
      run: |
        Write-Host "Testing PowerShell syntax..." -ForegroundColor Blue
        
        $scriptFiles = @()
        
        # Check main script
        if (Test-Path "./EpicManifestUpdater.ps1") {
          $scriptFiles += Get-Item "./EpicManifestUpdater.ps1"
        }
        
        # Check for other PowerShell files
        $additionalScripts = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object {
          $_.Name -ne "EpicManifestUpdater.ps1" -and $_.FullName -notlike "*/.git/*"
        }
        $scriptFiles += $additionalScripts
        
        $syntaxErrors = @()
        
        foreach ($file in $scriptFiles) {
          try {
            $content = Get-Content $file.FullName -Raw -ErrorAction Stop
            if ($content.Trim()) {
              $null = [System.Management.Automation.PSParser]::Tokenize($content, [ref]$null)
              Write-Host "✅ Syntax OK: $($file.Name)" -ForegroundColor Green
            } else {
              Write-Host "⚠️ Empty file: $($file.Name)" -ForegroundColor Yellow
            }
          }
          catch {
            Write-Host "❌ Syntax Error in $($file.Name): $($_.Exception.Message)" -ForegroundColor Red
            $syntaxErrors += $file.Name
          }
        }
        
        if ($syntaxErrors.Count -gt 0) {
          Write-Host "❌ Found syntax errors in $($syntaxErrors.Count) files" -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ All PowerShell files have valid syntax" -ForegroundColor Green
        }
        
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        # Check if PSScriptAnalyzer is available
        try {
          Import-Module PSScriptAnalyzer -ErrorAction Stop
          Write-Host "✅ PSScriptAnalyzer module loaded" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ PSScriptAnalyzer not available, skipping analysis" -ForegroundColor Yellow
          exit 0
        }
        
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Blue
        
        $analysisResults = @()
        $errorCount = 0
        $warningCount = 0
        
        # Analyze main script
        if (Test-Path "./EpicManifestUpdater.ps1") {
          Write-Host "Analyzing EpicManifestUpdater.ps1..." -ForegroundColor Cyan
          
          try {
            $results = Invoke-ScriptAnalyzer -Path "./EpicManifestUpdater.ps1" -Severity Error,Warning -ErrorAction Stop
            
            if ($results) {
              $analysisResults += $results
              $fileErrors = ($results | Where-Object Severity -eq 'Error').Count
              $fileWarnings = ($results | Where-Object Severity -eq 'Warning').Count
              $errorCount += $fileErrors
              $warningCount += $fileWarnings
              
              Write-Host "  Errors: $fileErrors, Warnings: $fileWarnings" -ForegroundColor Yellow
              
              # Show specific issues for errors
              if ($fileErrors -gt 0) {
                $results | Where-Object Severity -eq 'Error' | ForEach-Object {
                  Write-Host "    ERROR: Line $($_.Line) - $($_.Message)" -ForegroundColor Red
                }
              }
            } else {
              Write-Host "  ✅ Clean" -ForegroundColor Green
            }
          }
          catch {
            Write-Host "  ⚠️ Failed to analyze: $($_.Exception.Message)" -ForegroundColor Yellow
          }
        }
        
        # Analyze other PowerShell files
        $otherScripts = Get-ChildItem -Path . -Filter "*.ps1" -Recurse | Where-Object {
          $_.Name -ne "EpicManifestUpdater.ps1" -and $_.FullName -notlike "*/.git/*"
        }
        
        foreach ($file in $otherScripts) {
          Write-Host "Analyzing: $($file.Name)" -ForegroundColor Cyan
          
          try {
            $results = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Error,Warning -ErrorAction Stop
            
            if ($results) {
              $analysisResults += $results
              $fileErrors = ($results | Where-Object Severity -eq 'Error').Count
              $fileWarnings = ($results | Where-Object Severity -eq 'Warning').Count
              $errorCount += $fileErrors
              $warningCount += $fileWarnings
              
              Write-Host "  Errors: $fileErrors, Warnings: $fileWarnings" -ForegroundColor Yellow
            } else {
              Write-Host "  ✅ Clean" -ForegroundColor Green
            }
          }
          catch {
            Write-Host "  ⚠️ Failed to analyze $($file.Name): $($_.Exception.Message)" -ForegroundColor Yellow
          }
        }
        
        Write-Host "`nAnalysis Summary:" -ForegroundColor Blue
        Write-Host "Total Errors: $errorCount" -ForegroundColor $(if($errorCount -gt 0){'Red'}else{'Green'})
        Write-Host "Total Warnings: $warningCount" -ForegroundColor $(if($warningCount -gt 0){'Yellow'}else{'Green'})
        
        if ($errorCount -gt 0) {
          Write-Host "❌ PSScriptAnalyzer found $errorCount errors. Please fix before merging." -ForegroundColor Red
          exit 1
        } else {
          Write-Host "✅ PSScriptAnalyzer validation passed!" -ForegroundColor Green
        }
        
    - name: Test script content validation
      shell: pwsh
      run: |
        Write-Host "Validating script content..." -ForegroundColor Blue
        
        if (-not (Test-Path "./EpicManifestUpdater.ps1")) {
          Write-Host "⚠️ Main script not found, skipping content validation" -ForegroundColor Yellow
          exit 0
        }
        
        try {
          $scriptContent = Get-Content ./EpicManifestUpdater.ps1 -Raw
          
          # Check for Windows Forms assembly (should be present for GUI)
          if ($scriptContent -match 'Add-Type.*System\.Windows\.Forms|System\.Windows\.Forms') {
            Write-Host "✅ Windows Forms usage detected" -ForegroundColor Green
          } else {
            Write-Host "ℹ️ No Windows Forms usage detected" -ForegroundColor Blue
          }
          
          # Check for basic PowerShell patterns
          $patterns = @{
            'Functions' = 'function\s+\w+'
            'Parameters' = 'param\s*\('
            'Error Handling' = 'try\s*\{|catch\s*\{'
            'Variables' = '\$\w+'
          }
          
          foreach ($pattern in $patterns.GetEnumerator()) {
            if ($scriptContent -match $pattern.Value) {
              Write-Host "✅ $($pattern.Key) found" -ForegroundColor Green
            } else {
              Write-Host "ℹ️ No $($pattern.Key) detected" -ForegroundColor Blue
            }
          }
          
          Write-Host "✅ Script content validation completed" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Error validating script content: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
    - name: Run Pester tests (if available)
      shell: pwsh
      run: |
        if (-not (Test-Path ./tests)) {
          Write-Host "ℹ️ No tests directory found, skipping Pester tests" -ForegroundColor Blue
          exit 0
        }
        
        # Check if Pester is available
        try {
          Import-Module Pester -ErrorAction Stop
          Write-Host "✅ Pester module loaded" -ForegroundColor Green
        }
        catch {
          Write-Host "⚠️ Pester not available, skipping tests" -ForegroundColor Yellow
          exit 0
        }
        
        Write-Host "Running Pester tests..." -ForegroundColor Blue
        
        try {
          # Handle different Pester versions
          $pesterVersion = (Get-Module Pester).Version
          Write-Host "Using Pester version: $pesterVersion" -ForegroundColor Blue
          
          if ($pesterVersion.Major -ge 5) {
            # Pester 5.x
            $pesterConfig = New-PesterConfiguration
            $pesterConfig.Run.Path = './tests'
            $pesterConfig.Output.Verbosity = 'Normal'
            $pesterConfig.TestResult.Enabled = $true
            $pesterConfig.TestResult.OutputPath = './TestResults.xml'
            
            $result = Invoke-Pester -Configuration $pesterConfig
            
            if ($result.FailedCount -gt 0) {
              Write-Host "❌ $($result.FailedCount) tests failed" -ForegroundColor Red
              exit 1
            } else {
              Write-Host "✅ All $($result.PassedCount) tests passed" -ForegroundColor Green
            }
          } else {
            # Pester 4.x
            $result = Invoke-Pester -Path './tests' -OutputFile './TestResults.xml' -OutputFormat NUnitXml -PassThru
            
            if ($result.FailedCount -gt 0) {
              Write-Host "❌ $($result.FailedCount) tests failed" -ForegroundColor Red
              exit 1
            } else {
              Write-Host "✅ All $($result.PassedCount) tests passed" -ForegroundColor Green
            }
          }
        }
        catch {
          Write-Host "⚠️ Error running Pester tests: $($_.Exception.Message)" -ForegroundColor Yellow
          Write-Host "Continuing with validation..." -ForegroundColor Yellow
        }
        
    - name: Basic security validation
      shell: pwsh
      run: |
        Write-Host "Performing security validation..." -ForegroundColor Blue
        
        if (-not (Test-Path "./EpicManifestUpdater.ps1")) {
          Write-Host "⚠️ Main script not found, skipping security validation" -ForegroundColor Yellow
          exit 0
        }
        
        try {
          $scriptContent = Get-Content ./EpicManifestUpdater.ps1 -Raw
          
          $securityIssues = @()
          
          # Check for potential security issues (basic patterns)
          $securityPatterns = @{
            'Invoke-Expression usage' = 'Invoke-Expression|iex\s'
            'Download commands' = 'Invoke-WebRequest|Invoke-RestMethod|wget|curl'
            'Registry modifications' = 'Set-ItemProperty.*HKLM|New-ItemProperty.*HKLM'
            'Execution policy changes' = 'Set-ExecutionPolicy'
          }
          
          foreach ($check in $securityPatterns.GetEnumerator()) {
            if ($scriptContent -match $check.Value) {
              $securityIssues += $check.Key
            }
          }
          
          # Check for good security practices
          $goodPractices = @()
          if ($scriptContent -match 'Test-Path') {
            $goodPractices += "Path validation"
          }
          if ($scriptContent -match 'try\s*\{.*catch') {
            $goodPractices += "Error handling"
          }
          if ($scriptContent -match '\[Parameter.*Mandatory') {
            $goodPractices += "Parameter validation"
          }
          
          # Report results
          if ($securityIssues.Count -gt 0) {
            Write-Host "⚠️ Security patterns detected (review recommended):" -ForegroundColor Yellow
            $securityIssues | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
          } else {
            Write-Host "✅ No concerning security patterns found" -ForegroundColor Green
          }
          
          if ($goodPractices.Count -gt 0) {
            Write-Host "✅ Good security practices found:" -ForegroundColor Green
            $goodPractices | ForEach-Object { Write-Host "  - $_" -ForegroundColor Green }
          }
        }
        catch {
          Write-Host "⚠️ Error during security validation: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('TestResults.xml') != ''
      with:
        name: test-results
        path: TestResults.xml
        
    - name: Validation summary
      shell: pwsh
      run: |
        Write-Host "`n🎉 PowerShell script validation completed!" -ForegroundColor Green
        Write-Host "📋 Validation Summary:" -ForegroundColor Blue
        Write-Host "  ✅ Repository structure validated" -ForegroundColor Green
        Write-Host "  ✅ PowerShell syntax checked" -ForegroundColor Green
        Write-Host "  ✅ PSScriptAnalyzer validation completed" -ForegroundColor Green
        Write-Host "  ✅ Script content validation performed" -ForegroundColor Green
        Write-Host "  ✅ Security validation completed" -ForegroundColor Green
        Write-Host "  ✅ Tests executed (if available)" -ForegroundColor Green
        Write-Host "`nAll validations completed successfully! 🚀" -ForegroundColor Green
