# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'index.html'
      - 'README.md'
      - '*.css'
      - '*.js'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate required files
        run: |
          echo "Validating required files for GitHub Pages deployment..."
          
          if [ -f "index.html" ]; then
            echo "‚úÖ index.html found"
            echo "üìÑ Preview of index.html (first 10 lines):"
            head -10 index.html
          else
            echo "‚ùå index.html not found"
            echo "Available files:"
            ls -la
            exit 1
          fi
          
          if [ -f "README.md" ]; then
            echo "‚úÖ README.md found"
          else
            echo "‚ö†Ô∏è README.md not found (optional)"
          fi
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload only necessary files for the website
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìù Deployed files include:"
          echo "  - index.html (main page)"
          echo "  - README.md (if available)"
          echo "  - EpicManifestUpdater.ps1 (downloadable script)"
